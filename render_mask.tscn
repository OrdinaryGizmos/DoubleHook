[gd_scene load_steps=5 format=3 uid="uid://j4a2hnvsynsi"]

[sub_resource type="SphereMesh" id="SphereMesh_msgb4"]

[sub_resource type="Shader" id="Shader_e1w7r"]
code = "shader_type spatial;
render_mode depth_prepass_alpha,cull_disabled,world_vertex_coords;

uniform bool masked = false;//set to true if passing thru a portal
uniform vec3 Portal_Global_Origin;
uniform vec3 Portal_Size;
uniform vec3 Portal_Rotation;
uniform sampler2D object_texture;
varying float y_f;
varying vec3 world_position;

void vertex() {
	if(masked){
		world_position = VERTEX;	//must have \"world_vertex_coords\" enabled as render mode for this to work
	}
}

void fragment() {
	if(masked){
		ALPHA_SCISSOR_THRESHOLD = 2.0;
		vec3 offset = world_position - Portal_Global_Origin;
		if(offset.x < Portal_Size.x && offset.x > -Portal_Size.x){
			if(offset.y < Portal_Size.y && offset.y > -Portal_Size.y){
				if(offset.z < Portal_Size.z && offset.z > -Portal_Size.z){
					ALPHA_SCISSOR_THRESHOLD = 0.0;	
				}
			}
		}
	}
	ALBEDO = texture(object_texture, UV).rgb;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5rf2b"]
render_priority = 0
shader = SubResource("Shader_e1w7r")
shader_parameter/masked = true
shader_parameter/Portal_Global_Origin = Vector3(5.215, 0, 0)
shader_parameter/Portal_Size = Vector3(5.57, 3, 0.925)
shader_parameter/Portal_Rotation = Vector3(0, 0, 0)

[sub_resource type="SphereMesh" id="SphereMesh_hb56s"]

[node name="RenderMask" type="Node3D"]

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.447187, 0, 0)
mesh = SubResource("SphereMesh_msgb4")
surface_material_override/0 = SubResource("ShaderMaterial_5rf2b")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("SphereMesh_hb56s")
